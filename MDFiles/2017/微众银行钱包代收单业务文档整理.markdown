## 加签验签
### 合法证书要求

> * 是合法的 CA 颁发
> * 证书没有过期
> * 证书没有被吊销
> * 证书签发的 CN 或 SAN 与回调域名匹配
> * 服务端发送的证书链完整
> * 验证方法：使用 Chrome 浏览器打开回调 URL，左上角显示**<font color=green>小绿锁</font>**且没有错误提示则为合法的正确配置的证书

### 与webank的交互必须符合HTTPS标注处理流程
> * 基于浏览器会由浏览器内置逻辑处理，而我是Java工程，需要按下图所示来进行流程处理，那么，的确无需返回验签这一步了。

![httpsflow](images/07/HttpsFlow.jpg)


### 平台接入微众银行钱包接口

> * 与该接口的交换必须事先验证，验证需要三步骤
>     * 微众事先提供app_id以及相应的secret和user_id给平台接入方。
>     * 获取AccessToken(同一平台全局唯一)，一般有效期2小时，7200秒,但请根据返回的expire_in/expire_time为准
>     * 获取SignTicket (同一平台全局唯一)，一般有效期1小时，3600秒，但请根据返回的expire_in/expire_time为准
>          * AccessToken/SignTicket可以缓存起来，**减少两次访问**，提高访问效率，但要注意定时更新。
>     * 登录并获取nonceTicket(随机串，一次性有效，用过作废)，有效期2分钟，120秒
>     * expire_in有效时长，单位秒;expire_time绝对失效时间，单位毫秒，请自行转换为具体时间。
>     *入口AccessToken需要根据微众分配的secret(app_id密钥)来请求生成。**secret变了，所有该平台下的ticket全失效，须重新获取**。

完成以上安全验证准备工作后，可进行具体的业务逻辑部分。

##### 签名算法测试地址

> * https://test-svrapi.webank.com/环境/api/base/signTest。来校验自己写的代码加签是否正确。
> * 请求参数再追加<font color=green>本地生成的32位随机串(比如：guid)</font>，然后排序，利用signTicket进行加签，算法如下。参与加签参数如下：
>      * app_id
>      * nonce
>      * version
>      * ticket
>      * post的body，亦即json数据
> * 请求必须是POST模式。
> * <font color=red>返回不需要校验吗,还是因为走了HTTPS，无需多此一举?</font>，文档中没看到啊。

##### 签名示例

```java
//signTicket有效期1小时，全局唯一，定时更新,此前需要从缓存中提取signTicket,如果没有需要
//从webank去用AccessToken获取。
public static string sign(List<string> values, string signTicket) {
  if (values == null) {
    throw new NullPointerException("values is null");
  }
  values.removeAll(Collections.singleton(null));// remove null
  values.add(signTicket);
  java.util.Collections.sort(values);
  stringBuilder sb = new stringBuilder();
  for (string s : values) {
    sb.append(s);
  }
  try {
    MessageDigest md = MessageDigest.getInstance("sha1");
    md.update(sb.tostring().getBytes("UTF-8"));
    string sign = bytesToHex(md.digest());
    return sign;
  } catch (Exception e) {
    throw new RuntimeException(e);
  }
}
```

##### 通知类验签
>  * 需要注意的是返回body的json数据中只提取**<font color=green>data</font>**属性进行验签
>  * 从URL中提取nonce_str,timestamp,sign,ticket参数
>  * 回调通知注意如下几点:
>        * 当请求的 HTTP 返回码为 200 时，认为本次回调成功。
>        * 当请求的 HTTP 返回码不为 200 时，认为本次回调失败，回调请求将加入重试队列。
>        * 重试队列中的请求最多会被重试 6 次，每次间隔约 5 分钟，单个请求最大生存时间为 1小时。超过限制的请求就算失败也将被永久丢弃。
>        *  **<font color=red>由于为了尽可能的送达消息，回调通知可能会重复！请注意对消息进行去重!</font>**

## 非交易部分，仅是参考，属于进件部分
### 代理商接入webank步骤
> * 必须同时搭建生产环境和开发环境的两套系统。
> * 满足如下两点，获取相应数据和配置即可完成代理商入驻。
> * 这部分**只能通过人工完成**，后续商户入驻则通过程序完成。
#### 提交申请信息
> * webank收到申请内部审核通过后下发如下数据
>       * 代理商编号(识别代理商，全局唯一)
>       * HTTPS证书(测试环境与正式环境不同，需找人获取)
>       * app_id(渠道编码，全局唯一)
>       * secret(为app_id分配的密钥，用于获取AccessToken，测试环境与正式环境不同，需找人获取)
#### 提交录入白名单的服务器IP地址
> * 按照给定的文档格式提交分别用于测试和生产环境的服务器IP


### 代理上下的商户入驻
> * 这部分必须通过**程序调用webank接口**来自动完成，人工审核部分留给代理商去做。
#### 请求URL地址
> * **测试地址**:https://l.test-svrapi.webank.com/api/aap/server/wepay/merchantregister
> * **生产环境地址**:https://svrapi.webank.com/api/aap/server/wepay/merchantregister
#### 请求报文举例
> * 所有请求一律采用**POST**方式
##### post url
> * 此前确保已缓存了AccessToken,SignTicket用来加签
https://l.testsvrapi.webank.com/api/aap/server/wepay/merchantregister?app_id=W9816632&nonce=8fd022c51b484a65befc46fdf279f2bd&version=1.0.0&sign=48B52095101D9503DBE1432B986383CCCC0BA137
##### post data
```json
{
"productType":"004",
"merchantInfo":{"agencyId":"2023020000",
      "partnerMchId":"holly52",
      "appId":"wx90bfe8ac7aa1338a",
      "idType":"01",
      "idNo":"130529198807040317",
      "merchantName":"商户名 1 称",
      "legalRepresent":"法人代表",
      "aliasName":"商户简12称",
      "licenceNo":"1112312",
      "licenceBeginTime":"2016-01-01",
      "licenceEndTime":"2017-01-01",
      "taxRegisterNo":"12323123",
      "positionCode":"0",
      "contactName":"a",
      "contactPhoneNo":"18575575236",
      "mainBusiness":"a",
      "businessRange":"a","registerAddr":"a",
      "merchantTypeCode":"1210",
      "merchantLevel":"2",
      "parentMerchantId":null,
      "merchantNature":"a",
      "contractNo":"12321312",
      "openYear":"2016-01-01",
      "categoryId":"204"},
"merchantAccount":{"accountNo":"9999600170300100003101"
      ,"accountOpbankNo":"323584000888","accountName":"a","accountOpbank":"a",
      "accountSubbranchOpbank":"商a",
      "accountOpbankAddr":"a",
      "acctType":"01","settlementCycle":"1"},
"paymentType":"26",
"settlementType":"01",
"servicePhone":"0755-8276654",
"contactPhone":"18575575236",
"contactEmail":"xiaobao@webank.com",
"memo":"a","chargeType":"02","commissionRate":"7","externalInfo":"a",
"district":"0755"}
```
##### response data

> * 测试用的<font color=red>wbMerchantId参数</font>必须告知webank测试专员审核后才能用
> * <font color=red>亦即程序只代表调用处理结果，并不代表商户号能正常使用，生产环境也是如此?那岂不没法用?还是有什么进件步骤?暂时不懂</font>
> * 所谓<font color=Teal>进件就是商户入驻啊，也就是提交完整资料，webank审核通过并返回wbMerchantId即可完成进件</font>。
> * <font color=red>这里没提交返回验签啊</font>。

```json
{
    "code": "0",
    "msg": "请求成功",
    "bizSeqNo": "1705082LD01176100000000000000115",
    "transactionTime": "20170508120941",
    "wbMerchantId": "202075512100014",
    "success": true
}
```

### 商户信息查询
### 商户信息修改

## 交易支付业务
> *  **<font color=Teal>只看公众号支付和条码支付</font>**。
### 扫码支付
> * 亦即c扫b，用户扫商户提供的二维码进行支付(主扫支付)，需要回调地址notifyUrl才嫩确定支付成功。
#### 请求地址
> * 测试环境：https://l.test-svrapi.webank.com/api/aap/server/wepay/scancodepay
> * 生产环境：https://svrapi.webank.com/api/aap/server/wepay/scancodepay

#### 请求支付
#### 异步通知支付结果
#### 查询订单支付结果
### 条码支付
### 公众号支付
### 微信app支付
### 微信H5支付
### 小程序支付
### 申请退款
### 撤销订单
### 关闭订单

## 提现
