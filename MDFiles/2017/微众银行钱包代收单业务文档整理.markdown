## 加签验签
### 合法证书要求

> * 是合法的 CA 颁发
> * 证书没有过期
> * 证书没有被吊销
> * 证书签发的 CN 或 SAN 与回调域名匹配
> * 服务端发送的证书链完整
> * 验证方法：使用 Chrome 浏览器打开回调 URL，左上角显示**<font color=green>小绿锁</font>**且没有错误提示则为合法的正确配置的证书

### 与webank的交互必须符合HTTPS标注处理流程
> * 基于浏览器会由浏览器内置逻辑处理，而我是Java工程，需要按下图所示来进行流程处理，那么，的确无需返回验签这一步了。

![httpsflow](images/07/HttpsFlow.jpg)

### webank提供的官方示例

> * <font color=Teal>该示例中的代理只在测试环境中采用，正式生产环境不会使用代理，故而代理账号和密码需要额外想webank专员索取</font>
> * 关键证书载入
>       * keystore载入**本地密钥库**。
>       * trustStore载入**服务器证书**。
>       * 本地密钥库还需提供密码keyStorePass。
> * 测试走代理，需要额外提供代理的账号密码，需从webank专员那索取。

#### https测试工具应用

```java
package com.webank.sdk.util;

import com.webank.sdk.util.HttpClientUtils;

import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.util.EntityUtils;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.Charset;
import java.security.KeyStore;

/**
 * Created by baletan on 2017/1/11.
 */
public class HttpClientDemo {

    static String proxyHost = "119.29.195.110";//代理IP固定为119.29.195.110
    static int proxyPort = 8080;//代理端口固定8080
    static String proxyUsername = "";//代理帐号以项目经理提供的帐号为准
    static String proxyPassword = "";//代理密码以项目经理提供的密码为准

    public static void main(String[] args) throws Exception {

    	if(args.length<4){
    		System.out.println("Usage:%proc clientJks serverJks url enableProxy [proxyuser proxypassword]");
    		System.exit(-1);
    	}

    	if(args.length==6){
    		proxyUsername = args[4];
    		proxyPassword = args[5];
    	}

    	String url = args[2];
    	String clientJks = args[0];
    	String serverJks = args[1];
    	String enableProxy = args[3];
    	System.out.println("url : " + url);
    	System.out.println("clientJks : " + clientJks);
    	System.out.println("serverJks : " + serverJks);
    	System.out.println("enableProxy : " + enableProxy);
        String keyStorePass = "App1234.";//具体密码值以项目经理提供的为准，客户端证书密码默认为App1234.
        InputStream keyStoreInput = null;
        InputStream trustStoreInput = null;
        KeyStore keyStore = null;
        KeyStore trustStore = null;
        //导入证书
        try {
            keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
            keyStoreInput = new FileInputStream(new File(clientJks));
            keyStore.load(keyStoreInput, keyStorePass.toCharArray());

            trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
            trustStoreInput = new FileInputStream(new File(serverJks));
            trustStore.load(trustStoreInput, null);
        }catch (Throwable t){
            throw new RuntimeException("input KeyStore  fail", t);
        }

        if(enableProxy.equals("0")){
        	proxyHost="";

        }

        //创建加载证书且设置代理的HttpClient，如不需要代理，请将proxyHost、proxyPort、proxyUsername、proxyPassword全部置为空
        //注：代理只在测试环境使用，生产环境不使用
        HttpClient client = HttpClientUtils.createHttpClientWithCert(keyStore, keyStorePass, trustStore, 200, 5, 1000, 3000, proxyHost, proxyPort, proxyUsername, proxyPassword);

        HttpGet httpGet = new HttpGet(url);//此URL为测试URL，具体业务URL请求请参考接口文�??
        //执行
        try {
            HttpResponse response = client.execute(httpGet);


            System.out.println("----------------------------------------");
            System.out.println(response.getStatusLine());
            System.out.println(EntityUtils.toString(response.getEntity(),Charset.defaultCharset()));

        } catch (ClientProtocolException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }finally {
            if (keyStoreInput != null) {
                try {
                    keyStoreInput.close();
                } catch (IOException e) {
                    throw new RuntimeException("key store close fail", e);
                }
            }

            if (trustStoreInput != null) {
                try {
                    trustStoreInput.close();
                } catch (IOException e) {
                    throw new RuntimeException("trust store close fail", e);
                }
            }
        }
    }
}
```

#### https工具

> * 构造HttpClientUtils的几个关键参数
>      * connMaxTotal，连接池中最大支持连接数（例子中配置为200）
>      * connDefaultMaxPerRoute，允许最大路由节点数（例子中配置为5）
>      * validateInactivityMillSeconds,验证闲置的连接有效性的延时时长（空闲下来到开始校验之间的时间差，例子为1000毫秒）
>      * connEvictIdleConnectionsTimeoutMillSeconds，回收闲置连接前闲置时间（即关闭连接，例子为3000毫秒）
>      * proxy相关参数如果没有则设置为null。

##### pom依赖文件

> * 其中commons-lang3这个jar包的用途如下：
> 跟java.lang这个包的作用类似，Commons Lang这一组API也是提供一些基础的、通用的操作和处理，如自动生成toString()的结果、自动实现hashCode()和equals()方法、数组操作、枚举、日期和时间的处理等等。

```xml
           <dependency>
               <groupId>org.apache.httpcomponents</groupId>
               <artifactId>httpclient</artifactId>
               <version>4.5.1</version>
           </dependency>
           <dependency>
               <groupId>org.apache.httpcomponents</groupId>
               <artifactId>httpcore</artifactId>
               <version>4.4.1</version>
           </dependency>
           <dependency>
               <groupId>org.apache.commons</groupId>
               <artifactId>commons-lang3</artifactId>
               <version>3.6</version>
           </dependency>
```

```java
package com.webank.sdk.util;

import java.security.KeyStore;
import java.util.concurrent.TimeUnit;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;

import org.apache.commons.lang3.StringUtils;
import org.apache.http.HttpHost;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.CookieStore;
import org.apache.http.client.CredentialsProvider;
import org.apache.http.client.config.CookieSpecs;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.config.Registry;
import org.apache.http.config.RegistryBuilder;
import org.apache.http.config.SocketConfig;
import org.apache.http.conn.socket.ConnectionSocketFactory;
import org.apache.http.conn.socket.PlainConnectionSocketFactory;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.conn.ssl.TrustSelfSignedStrategy;
import org.apache.http.impl.client.BasicCookieStore;
import org.apache.http.impl.client.BasicCredentialsProvider;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.apache.http.ssl.SSLContexts;

/**
 * Copyright (C) @2016 Webank Group Holding Limited
 */
public class HttpClientUtils {

    public static CloseableHttpClient createHttpClientWithCert(KeyStore keyStore, String keyStorePassword, KeyStore trustStoreFile,
                                                               int connMaxTotal,
                                                               int connDefaultMaxPerRoute,
                                                               int validateInactivityMillSeconds,
                                                               int connEvictIdleConnectionsTimeoutMillSeconds,
                                                               String proxyHost,
                                                               int proxyPort,
                                                               String proxyUsername,
                                                               String proxyPassword) {
        SSLContext sslcontext = null;
        try {
            sslcontext = SSLContexts.custom()
                    .loadKeyMaterial(keyStore, keyStorePassword.toCharArray())
                    .loadTrustMaterial(trustStoreFile, new TrustSelfSignedStrategy()).build();
        } catch (Exception e) {
            throw new RuntimeException("key store fail", e);
        }

        // Create all-trusting host name verifier
        HostnameVerifier allHostsValid = new HostnameVerifier() {
            public boolean verify(String hostname, SSLSession session) {
                return true;
            }
        };

        // Allow TLSv1 protocol only
        SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(
                sslcontext,
                new String[]{"TLSv1"},
                null,
                SSLConnectionSocketFactory.getDefaultHostnameVerifier());
//                allHostsValid);

        // Create a registry of custom connection socket factories for supported
        // protocol schemes.
        Registry<ConnectionSocketFactory> socketFactoryRegistry = RegistryBuilder.<ConnectionSocketFactory>create()
                .register("https", sslsf)
                .register("http", PlainConnectionSocketFactory.INSTANCE)
                .build();


        // Create a connection manager with custom configuration.
        PoolingHttpClientConnectionManager connManager = new PoolingHttpClientConnectionManager(socketFactoryRegistry);

        // Create socket configuration
        SocketConfig socketConfig = SocketConfig.custom().setTcpNoDelay(true).build();// 小数据网络包
        // Configure the connection manager to use socket configuration either
        // by default or for a specific host.
        connManager.setDefaultSocketConfig(socketConfig);
        // Validate connections after 1 sec of inactivity
        connManager.setValidateAfterInactivity(validateInactivityMillSeconds);


        // Configure total max or per route limits for persistent connections
        // that can be kept in the pool or leased by the connection manager.
        connManager.setMaxTotal(connMaxTotal);
        connManager.setDefaultMaxPerRoute(connDefaultMaxPerRoute);

        // Use custom cookie store if necessary.
        CookieStore cookieStore = new BasicCookieStore();
        // Use custom credentials provider if necessary.
        //CredentialsProvider credentialsProvider = new BasicCredentialsProvider();
        // Create global request configuration
        RequestConfig defaultRequestConfig = RequestConfig.custom().setCookieSpec(CookieSpecs.DEFAULT)
                .setExpectContinueEnabled(true)
                .build();

        HttpHost proxy = null;
        if (StringUtils.isNotEmpty(proxyHost)) {
            proxy = new HttpHost(proxyHost, proxyPort, "http");
        }
        CredentialsProvider credsProvider = new BasicCredentialsProvider();
        if (StringUtils.isNotEmpty(proxyUsername) && StringUtils.isNotEmpty(proxyPassword)) {
            credsProvider.setCredentials(
                    new AuthScope(proxyHost, proxyPort),
                    new UsernamePasswordCredentials(proxyUsername, proxyPassword));
        }

        // Create an HttpClient with the given custom dependencies and
        // configuration.
        CloseableHttpClient httpclient;
        if (proxy == null) {
            httpclient = HttpClients.custom().setConnectionManager(connManager)
                    .setDefaultCookieStore(cookieStore)
                    .setDefaultRequestConfig(defaultRequestConfig).evictExpiredConnections()
                    .evictIdleConnections(connEvictIdleConnectionsTimeoutMillSeconds, TimeUnit.MILLISECONDS)
                    .setSSLSocketFactory(sslsf).build();
        } else {
            httpclient = HttpClients.custom().setConnectionManager(connManager)
                    .setProxy(proxy)
                    .setDefaultCredentialsProvider(credsProvider)
                    .setDefaultCookieStore(cookieStore)
                    .setDefaultRequestConfig(defaultRequestConfig).evictExpiredConnections()
                    .evictIdleConnections(connEvictIdleConnectionsTimeoutMillSeconds, TimeUnit.MILLISECONDS)
                    .setSSLSocketFactory(sslsf).build();
        }
        return httpclient;
    }
}
```

### 平台接入微众银行钱包接口

> * 与该接口的交换必须事先验证，验证需要三步骤
>     * 微众事先提供app_id以及相应的secret和user_id给平台接入方。
>     * 获取AccessToken(同一平台全局唯一)，一般有效期2小时，7200秒,但请根据返回的expire_in/expire_time为准
>     * 获取SignTicket (同一平台全局唯一)，一般有效期1小时，3600秒，但请根据返回的expire_in/expire_time为准
>          * AccessToken/SignTicket可以缓存起来，**减少两次访问**，提高访问效率，但要注意定时更新。
>     * 登录并获取nonceTicket(随机串，一次性有效，用过作废)，有效期2分钟，120秒
>     * expire_in有效时长，单位秒;expire_time绝对失效时间，单位毫秒，请自行转换为具体时间。
>     *入口AccessToken需要根据微众分配的secret(app_id密钥)来请求生成。**secret变了，所有该平台下的ticket全失效，须重新获取**。

完成以上安全验证准备工作后，可进行具体的业务逻辑部分。

##### 签名算法测试地址

> * https://test-svrapi.webank.com/环境/api/base/signTest。来校验自己写的代码加签是否正确。
> * 请求参数再追加<font color=green>本地生成的32位随机串(比如：guid)</font>，然后排序，利用signTicket进行加签，算法如下。参与加签参数如下：
>      * app_id
>      * nonce
>      * version
>      * ticket
>      * post的body，亦即json数据
> * 请求必须是POST模式。
> * <font color=red>返回不需要校验吗,还是因为走了HTTPS，无需多此一举?</font>，文档中没看到啊。

##### 签名示例

```java
//signTicket有效期1小时，全局唯一，定时更新,此前需要从缓存中提取signTicket,如果没有需要
//从webank去用AccessToken获取。
public static string sign(List<string> values, string signTicket) {
  if (values == null) {
    throw new NullPointerException("values is null");
  }
  values.removeAll(Collections.singleton(null));// remove null
  values.add(signTicket);
  java.util.Collections.sort(values);
  stringBuilder sb = new stringBuilder();
  for (string s : values) {
    sb.append(s);
  }
  try {
    MessageDigest md = MessageDigest.getInstance("sha1");
    md.update(sb.tostring().getBytes("UTF-8"));
    string sign = bytesToHex(md.digest());
    return sign;
  } catch (Exception e) {
    throw new RuntimeException(e);
  }
}
```

##### 通知类验签
>  * 需要注意的是返回body的json数据中只提取**<font color=green>data</font>**属性进行验签
>  * 从URL中提取nonce_str,timestamp,sign,ticket参数
>  * 回调通知注意如下几点:
>        * 当请求的 HTTP 返回码为 200 时，认为本次回调成功。
>        * 当请求的 HTTP 返回码不为 200 时，认为本次回调失败，回调请求将加入重试队列。
>        * 重试队列中的请求最多会被重试 6 次，每次间隔约 5 分钟，单个请求最大生存时间为 1小时。超过限制的请求就算失败也将被永久丢弃。
>        *  **<font color=red>由于为了尽可能的送达消息，回调通知可能会重复！请注意对消息进行去重!</font>**

## 非交易部分，仅是参考，属于进件部分
### 代理商接入webank步骤
> * 必须同时搭建生产环境和开发环境的两套系统。
> * 满足如下两点，获取相应数据和配置即可完成代理商入驻。
> * 这部分**只能通过人工完成**，后续商户入驻则通过程序完成。
#### 提交申请信息
> * webank收到申请内部审核通过后下发如下数据
>       * 代理商编号(识别代理商，全局唯一)
>       * HTTPS证书(测试环境与正式环境不同，需找人获取)
>       * app_id(渠道编码，全局唯一)
>       * secret(为app_id分配的密钥，用于获取AccessToken，测试环境与正式环境不同，需找人获取)
#### 提交录入白名单的服务器IP地址
> * 按照给定的文档格式提交分别用于测试和生产环境的服务器IP


### 代理上下的商户入驻
> * 这部分必须通过**程序调用webank接口**来自动完成，人工审核部分留给代理商去做。
#### 请求URL地址
> * **测试地址**:https://l.test-svrapi.webank.com/api/aap/server/wepay/merchantregister
> * **生产环境地址**:https://svrapi.webank.com/api/aap/server/wepay/merchantregister
#### 请求报文举例
> * 所有请求一律采用**POST**方式
##### post url
> * 此前确保已缓存了AccessToken,SignTicket用来加签
https://l.testsvrapi.webank.com/api/aap/server/wepay/merchantregister?app_id=W9816632&nonce=8fd022c51b484a65befc46fdf279f2bd&version=1.0.0&sign=48B52095101D9503DBE1432B986383CCCC0BA137
##### post data
```json
{
"productType":"004",
"merchantInfo":{"agencyId":"2023020000",
      "partnerMchId":"holly52",
      "appId":"wx90bfe8ac7aa1338a",
      "idType":"01",
      "idNo":"130529198807040317",
      "merchantName":"商户名 1 称",
      "legalRepresent":"法人代表",
      "aliasName":"商户简12称",
      "licenceNo":"1112312",
      "licenceBeginTime":"2016-01-01",
      "licenceEndTime":"2017-01-01",
      "taxRegisterNo":"12323123",
      "positionCode":"0",
      "contactName":"a",
      "contactPhoneNo":"18575575236",
      "mainBusiness":"a",
      "businessRange":"a","registerAddr":"a",
      "merchantTypeCode":"1210",
      "merchantLevel":"2",
      "parentMerchantId":null,
      "merchantNature":"a",
      "contractNo":"12321312",
      "openYear":"2016-01-01",
      "categoryId":"204"},
"merchantAccount":{"accountNo":"9999600170300100003101"
      ,"accountOpbankNo":"323584000888","accountName":"a","accountOpbank":"a",
      "accountSubbranchOpbank":"商a",
      "accountOpbankAddr":"a",
      "acctType":"01","settlementCycle":"1"},
"paymentType":"26",
"settlementType":"01",
"servicePhone":"0755-8276654",
"contactPhone":"18575575236",
"contactEmail":"xiaobao@webank.com",
"memo":"a","chargeType":"02","commissionRate":"7","externalInfo":"a",
"district":"0755"}
```
##### response data

> * 测试用的<font color=red>wbMerchantId参数</font>必须告知webank测试专员审核后才能用
> * <font color=red>亦即程序只代表调用处理结果，并不代表商户号能正常使用，生产环境也是如此?那岂不没法用?还是有什么进件步骤?暂时不懂</font>
> * 所谓<font color=Teal>进件就是商户入驻啊，也就是提交完整资料，webank审核通过并返回wbMerchantId即可完成进件</font>。
> * <font color=red>这里没提交返回验签啊</font>。

```json
{
    "code": "0",
    "msg": "请求成功",
    "bizSeqNo": "1705082LD01176100000000000000115",
    "transactionTime": "20170508120941",
    "wbMerchantId": "202075512100014",
    "success": true
}
```

## 交易支付业务

> *  **<font color=Teal>只看公众号支付和条码支付</font>**。

### 条码支付（扫码抢，亦即b->c被扫支付)

> * 有时会出现验密，此时平台需要轮询接口取得支付结果，此前可能一直取得是USERPAYING状态。

#### 请求地址
> * 测试地址：https://l.test-svrapi.webank.com/api/aap/server/wepay/barcodepay
> * 正式地址：https://svrapi.webank.com/api/aap/server/wepay/barcodepay
#### 请求参数对比
##### 现在支付参数
![微信多公众号被扫](images/07/branch-on-nowpayscan-by-weixin.jpg)
##### webank参数
> * 必须有的参数
>     * orderId: 闪惠订单id
>     * wbMerchantId: 闪惠supplierId
>     * storeId: 闪惠shopId
>     * authCode: 用户授权码
>     * totalAmount: 订单金额，单位：元，Decimal(10,2)，精确到小数点后2位
>     * subject: tradeDomain.getBody()来设置
> * 部分考虑提供的可选参数
>     * terminalId: 闪惠source?
>     * expireTime: 单位分钟
#### 返回参数对比
##### 现在支付参数
##### webank参数

### 公众号支付(主扫，c->b扫商户二维码支付)

#### 请求地址

> * 测试地址:https://l.test-svrapi.webank.com/api/aap/server/wepay/publicpay
> * 正式地址:https://svrapi.webank.com/api/aap/server/wepay/publicpay

#### 请求参数对比
##### 现在支付参数
> * 订单超时3600秒，也就是一小时。

![多公众号c扫b](images/07/branch-on-nowpayctob-by-weixin.jpg)

##### webank参数
> * 必须有的参数
>     * orderId: 闪惠订单id
>     * wbMerchantId: 闪惠supplierId
>     * storeId: 闪惠shopId
>     * totalAmount: 订单金额，单位：元，Decimal(10,2)，精确到小数点后2位
>     * subject: tradeDomain.getBody()来设置
>     * spbillCreateIp:用户设备IP
>     * subAppid:合作方微信公众号ID,如果商户有自己的公众号呢
>     * userId:支付宝-buyer_user_id,微信-openId
>     * notifyUrl：回调通知地址


### 申请退款
#### 请求地址
> * 测试地址:https://l.test-svrapi.webank.com/api/aap/server/wepay/queryrefund
> * 正式地址:https://svrapi.webank.com/api/aap/server/wepay/queryrefund

#### 请求参数
> * webMerchantId:闪惠商户Id
> * refundNo:应该是webank的订单号
> * orderId:闪惠orderId

### 关闭订单
> * 只能用于微信，支付宝不行?
> * 适用本接口的情况：
>      * 商户订单支付失败，需要重新发起支付前，调用本接口并生成新订单。
>      * 系统下单后，支付超时，系统退出不再受理。

#### 请求地址
> * 测试地址：https://l.test-svrapi.webank.com/api/aap/server/wepay/cancelorder
> * 正式地址：https://svrapi.webank.com/api/aap/server/wepay/cancelorder

#### 请求参数
> * wbMerchantId:闪惠商户id
> * orderId：闪惠orderId

## 提现
