## 常见问题
## 修改点
### 变更支付接口

主要针对变更支付合作方，需要修改如下几点
* mdfrontserver
    * 涉及增加paytype(支付渠道)以赋予相应的配置参数，比如：appid,partnerid...
    * 涉及支付成功后的回调，处理返现方案，注意只针对相应的paytypt(支付渠道)进行返现
* mdpaygate
    * 真正需要大改的地，负责与新的支付接口对接并将返回数据更改为我们体系内的数据。
* mdtradecenter
* mdtask

#### 涉及功能
 * c 扫 b ，主扫支付，必输密码
     * 回调通知
 * b 扫 c ，被扫支付，又叫扫码枪支付，五笔之后或者金额超限要输入密码
     * 轮询查询支付结果
     * 有的第三方也在支付不明确情况下，回调通知
 * 退款
 * 自动补单
 * 余额支付
 * 直连支付


#### mdfrontserver
## 浙江网商银行接口

只需要参考5.2.7 - 5.2.14部分即可。
## 几个关键点梳理说明

2017-09-08

* 全部采用redis - sentinel，70万5秒写入，70万删除20秒
* 剔除mdfrontserver
* paycenter模块,paygate模块,tradecenter模块,task模块
* 独立通道机制
* 独立insert表，后台update...
* 提炼sql
* 监控体系
* 舍弃dubbo,全部采用http/json模式。精确评测单台服务器处理能力，用jmeter压测。
* 结算库的异步同步机制
* http连接池
      * 保持过程中如何保证连接没有失效？
        很难保证。传统阻塞I/O模型，只有当I/O操做的时候，socket才能响应I/O事件。当TCP连接交给连接管理器后，它可能还处于“保持连接”的状态，但是无法监听socket状态和响应I/O事件。如果这时服务器将连接关闭的话，客户端是没法知道这个状态变化的，从而也无法采取适当的手段来关闭连接。

        针对这种情况，HttpClient采取一个策略，通过一个**后台的监控线程定时**的去检查连接池中连接是否还“新鲜”，如果过期了，或者空闲了一定时间则就将其从连接池里删除掉。ClientConnectionManager提供了 **closeExpiredConnections**和**closeIdleConnections**两个方法。监控新鲜这事如何做，关闭倒是知道。另外，可在服务端主动设置keep-alive的时长来决定closeExpiredConnections更靠谱点。这个是在连接池中关闭，不存在中断业务。

2017-09-11
* 本周考虑通道切换完善机制和httpclient连接池测试，以及着手逐步分离模式进行重构交易模块，尤其是通道分离机制，如何确保不堵死前端以及迅速切换是相辅相成的。
* insert完全独立，update/delete时，确保可重试，基于select，select确保与update/delete一一对应，去除死锁隐患，关键在于主键索引的设计。统计库单独拉出，仅接受insert/select操作。
* 中午再次崩了，现在支付超过3秒较平时高出3倍多，即导致mdpaygate负载升高至70%，进而拖垮整个系统，待考虑如何优化，比如完全独立出去。

2017-09-12
* 常规环境因为防火墙打开导致9040端口不通，进而导致dubbo不通，无法联调。已修复。
* 考虑测试http连接池。

2017-09-18

* mdpaygate继续剥离所有task类任务，尤其是b->c和支付订单查询接口以及补单部分。必须采用连接池
* mdpaygate回调与请求分离，尤其是回调，可重新设计一个中间表，只记录回调信息，纯insert，后续给一个服务负责select->process ->delete/insert-to-log(batch,累积一定数量)
* dubbo连接池配置部分研究
* 通道切换，用户/支付通道/，门店针对某个通道的多次进件虚拟进件号(真实对应某一个通道的进件号)，也就是说，我们这的一个真实门店id，对应多个虚拟门店id,每个虚拟门店id真实对应一个通道的进件号，另外，某个用户，这次用了这个进件号支付，下次就用另外一个进件号支付，嗯，就是这个需求。
